{"version":3,"file":"main.js","mappings":"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","sources":["webpack://particles-webgpu/./src/ts/attractors.ts","webpack://particles-webgpu/./src/ts/engine.ts","webpack://particles-webgpu/./src/ts/helpers.ts","webpack://particles-webgpu/./src/ts/image.ts","webpack://particles-webgpu/./src/ts/main.ts","webpack://particles-webgpu/./src/ts/parameters.ts","webpack://particles-webgpu/./src/ts/render/renderer-instanced-monocolor.ts","webpack://particles-webgpu/./src/ts/render/renderer-instanced-multicolor-velocity.ts","webpack://particles-webgpu/./src/ts/render/renderer-instanced-multicolor.ts","webpack://particles-webgpu/./src/ts/render/renderer-instanced.ts","webpack://particles-webgpu/./src/ts/render/renderer-monocolor.ts","webpack://particles-webgpu/./src/ts/render/renderer-multicolor-velocity.ts","webpack://particles-webgpu/./src/ts/render/renderer-multicolor.ts","webpack://particles-webgpu/./src/ts/render/renderer.ts","webpack://particles-webgpu/./src/ts/webgpu-utils/webgpu-canvas.ts","webpack://particles-webgpu/./src/ts/webgpu-utils/webgpu-device.ts","webpack://particles-webgpu/webpack/bootstrap","webpack://particles-webgpu/webpack/runtime/global","webpack://particles-webgpu/webpack/runtime/publicPath","webpack://particles-webgpu/webpack/before-startup","webpack://particles-webgpu/webpack/startup","webpack://particles-webgpu/webpack/after-startup"],"sourcesContent":["import { AttractorsPreset, Parameters } from \"./parameters\";\r\n\r\ntype Force = [number, number];\r\ntype Attractor = {\r\n    position: [number, number];\r\n    force: number;\r\n}\r\n\r\nlet time = 0;\r\n\r\nlet container: HTMLElement;\r\nconst className = \"attractor-overlay\";\r\n\r\nfunction setContainer(element: HTMLElement): void {\r\n    container = element;\r\n}\r\n\r\nfunction setOverlays(attractors: Attractor[]): void {\r\n    if (!container) {\r\n        throw new Error(\"A container is needed for overlays.\");\r\n    }\r\n\r\n    if (!Parameters.displayAttractors) {\r\n        const elements = Array.from(container.querySelectorAll<HTMLElement>(`.${className}`));\r\n        while (elements.length > 0) {\r\n            const lastElement = elements.pop();\r\n            lastElement.parentElement.removeChild(lastElement);\r\n        }\r\n        return;\r\n    }\r\n\r\n    const elements = Array.from(container.querySelectorAll<HTMLElement>(`.${className}`));\r\n    while (elements.length > attractors.length) {\r\n        const lastElement = elements.pop();\r\n        lastElement.parentElement.removeChild(lastElement);\r\n    }\r\n    while (elements.length < attractors.length) {\r\n        const newElement = document.createElement(\"span\");\r\n        newElement.className = className;\r\n        container.appendChild(newElement);\r\n        elements.push(newElement);\r\n    }\r\n\r\n    for (let i = 0; i < elements.length; i++) {\r\n        const x = 100 * (0.5 + 0.5 * attractors[i].position[0]);\r\n        const y = 100 * (0.5 + 0.5 * attractors[i].position[1]);\r\n        elements[i].style.left = `${x.toFixed(2)}%`;\r\n        elements[i].style.top = `${y.toFixed(2)}%`;\r\n    }\r\n}\r\n\r\nfunction getPreset(): Attractor[] {\r\n    const attractorsList: Attractor[] = [];\r\n\r\n    /* eslint indent: \"off\" */\r\n    const preset = Parameters.attractorsPreset;\r\n    switch (preset) {\r\n        case AttractorsPreset.ORBIT:\r\n            {\r\n                attractorsList.push({\r\n                    force: 7,\r\n                    position: [0, 0],\r\n                });\r\n                attractorsList.push({\r\n                    force: 5,\r\n                    position: [0.4 * Math.cos(time), 0.4 * Math.sin(time)],\r\n                });\r\n                attractorsList.push({\r\n                    force: 6,\r\n                    position: [0.8 * Math.cos(-0.9 * time), 0.8 * Math.sin(-0.9 * time)],\r\n                });\r\n                break;\r\n            }\r\n        case AttractorsPreset.SINES:\r\n            {\r\n                attractorsList.push({\r\n                    force: 7,\r\n                    position: [0.7 * Math.cos(time), 0.7 * Math.sin(2 * time)],\r\n                });\r\n                attractorsList.push({\r\n                    force: 7,\r\n                    position: [0.7 * Math.cos(1.8 * (time + 0.5)), 0.7 * Math.sin(0.9 * (time + 0.5))],\r\n                });\r\n                break;\r\n            }\r\n        case AttractorsPreset.CENTRAL_ATTRACTIVE:\r\n            {\r\n                attractorsList.push({\r\n                    force: 5,\r\n                    position: [0, 0],\r\n                });\r\n                break;\r\n            }\r\n        case AttractorsPreset.CENTRAL_REPULSIVE:\r\n            {\r\n                attractorsList.push({\r\n                    force: -5,\r\n                    position: [0, 0],\r\n                });\r\n                break;\r\n            }\r\n        default:\r\n            break;\r\n    }\r\n\r\n    const containerBox = container.getBoundingClientRect();\r\n    const aspectRatio = containerBox.width / containerBox.height;\r\n\r\n    for (const attractor of attractorsList) {\r\n        attractor.position[0] /= aspectRatio;\r\n    }\r\n\r\n    return attractorsList;\r\n}\r\n\r\nfunction update(dt: number): void {\r\n    time += dt;\r\n}\r\n\r\nexport {\r\n    getPreset,\r\n    setOverlays,\r\n    setContainer,\r\n    update,\r\n};\r\nexport type {\r\n    Attractor,\r\n    Force,\r\n};\r\n","/// <reference types=\"./page-interface-generated\" />\r\n/// <reference types=\"./webgpu-utils/wgsl-type\" />\r\n\r\nimport InitializeColorsShaderSource from \"../shaders/initialize-colors.wgsl\";\r\nimport UpdateShaderSource from \"../shaders/update.wgsl\";\r\nimport ColorShaderPartSource from \"../shaders/utils/color.part.wgsl\";\r\nimport * as Attractors from \"./attractors\";\r\nimport { bytesToString } from \"./helpers\";\r\nimport { ColorMode, ColorSource, Parameters } from \"./parameters\";\r\nimport { Renderer } from \"./render/renderer\";\r\nimport { RendererInstancedMonocolor } from \"./render/renderer-instanced-monocolor\";\r\nimport { RendererInstancedMulticolor } from \"./render/renderer-instanced-multicolor\";\r\nimport { RendererInstancedMulticolorVelocity } from \"./render/renderer-instanced-multicolor-velocity\";\r\nimport { RendererMonocolor } from \"./render/renderer-monocolor\";\r\nimport { RendererMulticolor } from \"./render/renderer-multicolor\";\r\nimport { RendererMulticolorVelocity } from \"./render/renderer-multicolor-velocity\";\r\nimport * as WebGPU from \"./webgpu-utils/webgpu-device\";\r\n\r\nconst MAX_ATTRACTORS = 4;\r\n\r\ntype ParticlesBatch = {\r\n    gpuBuffer: GPUBuffer;\r\n    computeBindgroup: GPUBindGroup;\r\n    colorsBuffer: GPUBuffer;\r\n    initializeColorsComputeBindgroup: GPUBindGroup;\r\n    particlesCount: number;\r\n    dispatchSize: number;\r\n}\r\n\r\nclass Engine {\r\n    private static readonly WORKGROUP_SIZE = 256;\r\n\r\n    private readonly computePipeline: GPUComputePipeline;\r\n    private readonly computeUniformsBuffer: GPUBuffer;\r\n\r\n    private readonly particleBatches: ParticlesBatch[] = [];\r\n\r\n    private readonly initializeColorsComputePipeline: GPUComputePipeline;\r\n\r\n    private readonly rendererMonocolor: RendererMonocolor;\r\n    private readonly rendererMulticolor: RendererMulticolor;\r\n    private readonly rendererMulticolorVelocity: RendererMulticolorVelocity;\r\n    private readonly rendererInstancedMonocolor: RendererInstancedMonocolor;\r\n    private readonly rendererInstancedMulticolor: RendererInstancedMulticolor;\r\n    private readonly rendererInstancedMulticolorVelocity: RendererInstancedMulticolorVelocity;\r\n\r\n    public constructor(targetTextureFormat: GPUTextureFormat) {\r\n        this.rendererMonocolor = new RendererMonocolor(targetTextureFormat);\r\n        this.rendererMulticolor = new RendererMulticolor(targetTextureFormat);\r\n        this.rendererMulticolorVelocity = new RendererMulticolorVelocity(targetTextureFormat);\r\n        this.rendererInstancedMonocolor = new RendererInstancedMonocolor(targetTextureFormat);\r\n        this.rendererInstancedMulticolor = new RendererInstancedMulticolor(targetTextureFormat);\r\n        this.rendererInstancedMulticolorVelocity = new RendererInstancedMulticolorVelocity(targetTextureFormat);\r\n\r\n        this.computePipeline = WebGPU.device.createComputePipeline({\r\n            compute: {\r\n                module: WebGPU.device.createShaderModule({ code: UpdateShaderSource }),\r\n                entryPoint: \"main\"\r\n            }\r\n        });\r\n\r\n        this.computeUniformsBuffer = WebGPU.device.createBuffer({\r\n            size: 96,\r\n            usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM,\r\n        });\r\n\r\n        this.initializeColorsComputePipeline = WebGPU.device.createComputePipeline({\r\n            compute: {\r\n                module: WebGPU.device.createShaderModule({ code: ColorShaderPartSource + InitializeColorsShaderSource }),\r\n                entryPoint: \"main\"\r\n            }\r\n        });\r\n    }\r\n\r\n    public get particlesCount(): number {\r\n        let count = 0;\r\n        for (const particlesBatch of this.particleBatches) {\r\n            count += particlesBatch.particlesCount;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    public update(commandEncoder: GPUCommandEncoder, dt: number, aspectRatio: number): void {\r\n        const attractors = Attractors.getPreset();\r\n        if (Page.Canvas.isMouseDown()) {\r\n            const attractor: Attractors.Attractor = {\r\n                position: Page.Canvas.getMousePosition() as [number, number],\r\n                force: 10 * Parameters.attraction,\r\n            };\r\n            attractor.position[0] = 2 * attractor.position[0] - 1;\r\n            attractor.position[1] = 2 * attractor.position[1] - 1;\r\n            attractors.push(attractor);\r\n        }\r\n        Attractors.setOverlays(attractors);\r\n\r\n        const uniformForce: Attractors.Force = [0, 3 * Parameters.gravity];\r\n        const uniformsBufferData = this.buildComputeUniforms(dt, aspectRatio, uniformForce, attractors);\r\n        WebGPU.device.queue.writeBuffer(this.computeUniformsBuffer, 0, uniformsBufferData);\r\n\r\n        for (const particlesBatch of this.particleBatches) {\r\n            const computePass = commandEncoder.beginComputePass();\r\n            computePass.setPipeline(this.computePipeline);\r\n            computePass.setBindGroup(0, particlesBatch.computeBindgroup);\r\n            computePass.dispatch(particlesBatch.dispatchSize);\r\n            computePass.end();\r\n        }\r\n    }\r\n\r\n    public draw(canvasWidth: number, canvasHeight: number, renderPassEncoder: GPURenderPassEncoder): void {\r\n        let renderer: Renderer;\r\n        const instanced = (Parameters.spriteSize > 1);\r\n        if (Parameters.colorMode === ColorMode.UNICOLOR) {\r\n            if (instanced) {\r\n                renderer = this.rendererInstancedMonocolor;\r\n            } else {\r\n                renderer = this.rendererMonocolor;\r\n            }\r\n        } else if (Parameters.colorSource === ColorSource.IMAGE) {\r\n            if (instanced) {\r\n                renderer = this.rendererInstancedMulticolor;\r\n            } else {\r\n                renderer = this.rendererMulticolor;\r\n            }\r\n        } else {\r\n            if (instanced) {\r\n                renderer = this.rendererInstancedMulticolorVelocity;\r\n            } else {\r\n                renderer = this.rendererMulticolorVelocity;\r\n            }\r\n        }\r\n\r\n        for (const particlesBatch of this.particleBatches) {\r\n            renderer.draw(canvasWidth, canvasHeight, renderPassEncoder, particlesBatch);\r\n        }\r\n    }\r\n\r\n    public reset(wantedParticlesCount: number): void {\r\n        for (const particlesBatch of this.particleBatches) {\r\n            if (particlesBatch.gpuBuffer) {\r\n                particlesBatch.gpuBuffer.destroy();\r\n            }\r\n            if (particlesBatch.colorsBuffer) {\r\n                particlesBatch.colorsBuffer.destroy();\r\n            }\r\n        }\r\n        this.particleBatches.length = 0;\r\n\r\n        let totalGpuBufferSize = 0, totalColorBufferSize = 0;\r\n\r\n        const particleSize = Float32Array.BYTES_PER_ELEMENT * (2 + 2);\r\n        const maxDispatchSize = Math.floor(WebGPU.device.limits.maxStorageBufferBindingSize / particleSize / Engine.WORKGROUP_SIZE);\r\n\r\n        let particlesLeftToAllocate = wantedParticlesCount;\r\n        while (particlesLeftToAllocate > 0) {\r\n            const idealDispatchSize = Math.ceil(particlesLeftToAllocate / Engine.WORKGROUP_SIZE);\r\n\r\n            const dispatchSize = Math.min(idealDispatchSize, maxDispatchSize);\r\n            const particlesCount = dispatchSize * Engine.WORKGROUP_SIZE;\r\n            particlesLeftToAllocate -= particlesCount;\r\n\r\n            const gpuBufferSize = particlesCount * particleSize;\r\n            const gpuBuffer = WebGPU.device.createBuffer({\r\n                size: gpuBufferSize,\r\n                usage: GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE,\r\n                mappedAtCreation: true,\r\n            });\r\n            totalGpuBufferSize += gpuBufferSize;\r\n            const colorsBufferSize = particlesCount * Uint32Array.BYTES_PER_ELEMENT;\r\n            const colorsGpuBuffer = WebGPU.device.createBuffer({\r\n                size: colorsBufferSize,\r\n                usage: GPUBufferUsage.VERTEX | GPUBufferUsage.STORAGE,\r\n                mappedAtCreation: false,\r\n            });\r\n            totalColorBufferSize += colorsBufferSize;\r\n\r\n            const gpuBufferData = gpuBuffer.getMappedRange();\r\n            const particlesBuffer = new Float32Array(gpuBufferData);\r\n            for (let iParticle = 0; iParticle < particlesCount; iParticle++) {\r\n                particlesBuffer[4 * iParticle + 0] = Math.random() * 2 - 1;\r\n                particlesBuffer[4 * iParticle + 1] = Math.random() * 2 - 1;\r\n                particlesBuffer[4 * iParticle + 2] = 0;\r\n                particlesBuffer[4 * iParticle + 3] = 0;\r\n            }\r\n            gpuBuffer.unmap();\r\n\r\n            const computeBindgroup = WebGPU.device.createBindGroup({\r\n                layout: this.computePipeline.getBindGroupLayout(0),\r\n                entries: [\r\n                    {\r\n                        binding: 0,\r\n                        resource: {\r\n                            buffer: gpuBuffer\r\n                        }\r\n                    },\r\n                    {\r\n                        binding: 1,\r\n                        resource: {\r\n                            buffer: this.computeUniformsBuffer\r\n                        }\r\n                    }\r\n                ]\r\n            });\r\n\r\n            const initializeColorsComputeBindgroup = WebGPU.device.createBindGroup({\r\n                layout: this.initializeColorsComputePipeline.getBindGroupLayout(0),\r\n                entries: [\r\n                    {\r\n                        binding: 0,\r\n                        resource: {\r\n                            buffer: gpuBuffer\r\n                        }\r\n                    },\r\n                    {\r\n                        binding: 1,\r\n                        resource: {\r\n                            buffer: colorsGpuBuffer\r\n                        }\r\n                    }\r\n                ]\r\n            });\r\n\r\n            this.particleBatches.push({\r\n                gpuBuffer,\r\n                computeBindgroup,\r\n                colorsBuffer: colorsGpuBuffer,\r\n                initializeColorsComputeBindgroup,\r\n                particlesCount,\r\n                dispatchSize,\r\n            });\r\n        }\r\n\r\n        console.info(`GPU memory used:\\n  - positions/velocities: ${bytesToString(totalGpuBufferSize)}\\n  - colors: ${bytesToString(totalColorBufferSize)}`);\r\n    }\r\n\r\n    public initializeColors(commandEncoder: GPUCommandEncoder, sampler: GPUSampler, texture: GPUTexture): void {\r\n        const textureBindgroup = WebGPU.device.createBindGroup({\r\n            layout: this.initializeColorsComputePipeline.getBindGroupLayout(1),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: sampler\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: texture.createView()\r\n                }\r\n            ]\r\n        });\r\n\r\n        for (const particlesBatch of this.particleBatches) {\r\n            const computePass = commandEncoder.beginComputePass();\r\n            computePass.setPipeline(this.initializeColorsComputePipeline);\r\n            computePass.setBindGroup(0, particlesBatch.initializeColorsComputeBindgroup);\r\n            computePass.setBindGroup(1, textureBindgroup);\r\n            computePass.dispatch(particlesBatch.dispatchSize);\r\n            computePass.end();\r\n        }\r\n    }\r\n\r\n    private buildComputeUniforms(dt: number, aspectRatio: number, force: Attractors.Force, attractors: Attractors.Attractor[]): ArrayBuffer {\r\n        if (attractors.length > MAX_ATTRACTORS) {\r\n            throw new Error(`Too many attractors (${attractors.length}, max is ${MAX_ATTRACTORS}).`);\r\n        }\r\n\r\n        const buffer = new ArrayBuffer(96);\r\n\r\n        new Float32Array(buffer, 0, 2).set([force[0], force[1]]);\r\n        new Float32Array(buffer, 8, 1).set([dt]);\r\n        new Uint32Array(buffer, 12, 1).set([Parameters.bounce ? 1 : 0]);\r\n        new Float32Array(buffer, 16, 1).set([Parameters.friction]);\r\n        new Float32Array(buffer, 20, 1).set([aspectRatio]);\r\n        new Uint32Array(buffer, 24, 1).set([attractors.length]);\r\n\r\n        const attractorsData = [];\r\n        for (const attractor of attractors) {\r\n            attractorsData.push(attractor.position[0]);\r\n            attractorsData.push(attractor.position[1]);\r\n            attractorsData.push(attractor.force);\r\n            attractorsData.push(0); // padding\r\n        }\r\n        new Float32Array(buffer, 32, attractorsData.length).set(attractorsData);\r\n\r\n        return buffer;\r\n    }\r\n}\r\n\r\nexport {\r\n    Engine,\r\n};\r\n\r\n","function bytesToString(bytes: number): string {\r\n    let quantity: number;\r\n    let unit: string;\r\n\r\n    if (bytes < 1024) {\r\n        quantity = bytes;\r\n        unit = \"B\";\r\n    } else if (bytes < 1024 * 1024) {\r\n        quantity = bytes / 1024;\r\n        unit = \"KB\";\r\n    } else {\r\n        quantity = bytes / 1024 / 1024;\r\n        unit = \"MB\";\r\n    }\r\n\r\n    return Math.ceil(quantity).toLocaleString() + \" \" + unit;\r\n}\r\n\r\nexport {\r\n    bytesToString,\r\n};\r\n","import * as WebGPU from \"./webgpu-utils/webgpu-device\";\r\n\r\ntype Texture = {\r\n    path: string;\r\n    gpuTexture: GPUTexture;\r\n}\r\n\r\nlet linearSampler: GPUSampler;\r\nlet texture: Texture;\r\n\r\nasync function getTexture(path: string): Promise<GPUTexture> {\r\n    if (!texture || texture.path !== path) {\r\n        if (texture) {\r\n            texture.gpuTexture.destroy();\r\n        }\r\n\r\n        const image = document.createElement(\"img\");\r\n        image.src = path;\r\n        await image.decode();\r\n        const imageBitmap = await createImageBitmap(image);\r\n\r\n        const gpuTexture = WebGPU.device.createTexture({\r\n            size: [imageBitmap.width, imageBitmap.height, 1],\r\n            format: 'rgba8unorm',\r\n            usage:\r\n                GPUTextureUsage.TEXTURE_BINDING |\r\n                GPUTextureUsage.COPY_DST |\r\n                GPUTextureUsage.RENDER_ATTACHMENT\r\n        });\r\n        WebGPU.device.queue.copyExternalImageToTexture(\r\n            { source: imageBitmap },\r\n            { texture: gpuTexture },\r\n            [imageBitmap.width, imageBitmap.height]\r\n        );\r\n\r\n        texture = {\r\n            path,\r\n            gpuTexture\r\n        };\r\n    }\r\n\r\n    return texture.gpuTexture;\r\n}\r\n\r\nfunction getSampler(): GPUSampler {\r\n    if (!linearSampler) {\r\n        linearSampler = WebGPU.device.createSampler({\r\n            addressModeU: \"clamp-to-edge\",\r\n            addressModeV: \"clamp-to-edge\",\r\n            magFilter: \"linear\",\r\n            minFilter: \"linear\",\r\n        });\r\n    }\r\n    return linearSampler;\r\n}\r\n\r\nexport {\r\n    getSampler,\r\n    getTexture,\r\n};\r\n","/// <reference types=\"./page-interface-generated\" />\r\n\r\nimport { Engine } from \"./engine\";\r\nimport * as Image from \"./image\";\r\nimport { ColorMode, Parameters } from \"./parameters\";\r\nimport { WebGPUCanvas } from \"./webgpu-utils/webgpu-canvas\";\r\nimport * as WebGPU from \"./webgpu-utils/webgpu-device\";\r\nimport * as Attractors from \"./attractors\";\r\n\r\nasync function main(): Promise<void> {\r\n    await WebGPU.initialize();\r\n    const device = WebGPU.device as GPUDevice;\r\n    const webgpuCanvas = new WebGPUCanvas(Page.Canvas.getCanvas());\r\n    const engine = new Engine(webgpuCanvas.textureFormat);\r\n    Attractors.setContainer(Page.Canvas.getCanvasContainer());\r\n\r\n    let lastRun = performance.now();\r\n\r\n    let needToReset = true;\r\n    Parameters.resetObservers.push(() => { needToReset = true; });\r\n\r\n    async function mainLoop(): Promise<void> {\r\n        const now = performance.now();\r\n        const dt = Parameters.speed * Math.min(1 / 60, 0.001 * (now - lastRun));\r\n        lastRun = now;\r\n\r\n        const commandEncoder = device.createCommandEncoder();\r\n\r\n        if (needToReset) {\r\n            needToReset = false;\r\n            engine.reset(Parameters.particlesCount);\r\n            Page.Canvas.setIndicatorText(\"particles-count\", engine.particlesCount.toLocaleString());\r\n\r\n            if (Parameters.colorMode === ColorMode.MULTICOLOR) {\r\n                const sampler = Image.getSampler();\r\n                Page.Canvas.showLoader(true);\r\n                const imageUrl = await Parameters.inputImageUrl();\r\n                const image = await Image.getTexture(imageUrl);\r\n                Page.Canvas.showLoader(false);\r\n                engine.initializeColors(commandEncoder, sampler, image);\r\n            }\r\n        }\r\n\r\n        webgpuCanvas.adjustSize();\r\n\r\n        Attractors.update(dt);\r\n        engine.update(commandEncoder, dt, webgpuCanvas.width / webgpuCanvas.height);\r\n\r\n        const renderPassEncoder = commandEncoder.beginRenderPass(webgpuCanvas.getRenderPassDescriptor());\r\n        webgpuCanvas.setFullcanvasViewport(renderPassEncoder);\r\n        webgpuCanvas.setFullcanvasScissor(renderPassEncoder);\r\n        engine.draw(webgpuCanvas.width, webgpuCanvas.height, renderPassEncoder);\r\n        renderPassEncoder.end();\r\n\r\n        device.queue.submit([commandEncoder.finish()]);\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n\r\n    requestAnimationFrame(mainLoop);\r\n}\r\n\r\nmain();\r\n","/// <reference types=\"./page-interface-generated\" />\r\n/// <reference types=\"./webgpu-utils/image-type\" />\r\n\r\nimport ImageUrlLadybug from \"../resources/ladybug.png\";\r\nimport ImageUrlColors from \"../resources/colors.png\";\r\n\r\nconst controlId = {\r\n    PARTICLES_COUNT_ID: \"particles-count-range-id\",\r\n    SPEED_RANGE_ID: \"speed-range-id\",\r\n    FRICTION_RANGE_ID: \"friction-range-id\",\r\n    BOUNCE_CHECKBOX_ID: \"bounce-checkbox-id\",\r\n    GRAVITY_RANGE_ID: \"gravity-range-id\",\r\n    RESET_BUTTON_ID: \"reset-button-id\",\r\n\r\n    ATTRACTION_RANGE_ID: \"attraction-range-id\",\r\n    ATTRACTORS_PRESET_SELECT_ID: \"attractors-preset-select-id\",\r\n    ATTRACTORS_DISPLAY_CHECKBOX_ID: \"display-attractors-checkbox-id\",\r\n\r\n    COLOR_MODE_TABS_ID: \"colors-mode-tabs-id\",\r\n    COLOR_AUTO_CHECKBOX_ID: \"auto-color-checkbox-id\",\r\n    PARTICLE_COLORPICKER_ID: \"particle-color-id\",\r\n    COLOR_SOURCE_TABS_ID: \"color-source-tabs-id\",\r\n    IMAGE_SELECT_ID: \"image-preset-select-id\",\r\n    IMAGE_UPLOAD_BUTTON_ID: \"input-image-upload-button\",\r\n\r\n    SPRITE_SIZE_RANGE_ID: \"sprite-size-range-id\",\r\n    BLENDING_CHECKBOX_ID: \"blending-checkbox-id\",\r\n    OPACITY_RANGE_ID: \"opacity-range-id\",\r\n    SHOW_INDICATORS_CHECKBOX_ID: \"show-indicators-checkbox-id\",\r\n};\r\n\r\ntype VoidObserver = () => void;\r\n\r\nenum AttractorsPreset {\r\n    NONE = \"none\",\r\n    ORBIT = \"orbit\",\r\n    SINES = \"sines\",\r\n    CENTRAL_ATTRACTIVE = \"central-attractive\",\r\n    CENTRAL_REPULSIVE = \"central-repulsive\",\r\n}\r\n\r\nenum ColorMode {\r\n    UNICOLOR = \"unicolor\",\r\n    MULTICOLOR = \"multicolor\",\r\n}\r\n\r\nenum ColorSource {\r\n    IMAGE = \"image\",\r\n    VELOCITY = \"velocity\",\r\n}\r\n\r\nenum ImagePreset {\r\n    COLORS = \"colors\",\r\n    LADYBUG = \"ladybug\"\r\n}\r\n\r\nlet customImageFile: File = null;\r\n\r\nabstract class Parameters {\r\n    public static readonly resetObservers: VoidObserver[] = [];\r\n    public static readonly speedChangeObservers: VoidObserver[] = [];\r\n\r\n    public static get particlesCount(): number {\r\n        return 1000000 * Page.Range.getValue(controlId.PARTICLES_COUNT_ID);\r\n    }\r\n    public static get speed(): number {\r\n        return Page.Range.getValue(controlId.SPEED_RANGE_ID);\r\n    }\r\n    public static get friction(): number {\r\n        return Page.Range.getValue(controlId.FRICTION_RANGE_ID);\r\n    }\r\n    public static get bounce(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.BOUNCE_CHECKBOX_ID);\r\n    }\r\n    public static get gravity(): number {\r\n        return Page.Range.getValue(controlId.GRAVITY_RANGE_ID);\r\n    }\r\n\r\n    public static get attraction(): number {\r\n        return Page.Range.getValue(controlId.ATTRACTION_RANGE_ID);\r\n    }\r\n    public static get attractorsPreset(): AttractorsPreset {\r\n        return Page.Select.getValue(controlId.ATTRACTORS_PRESET_SELECT_ID) as AttractorsPreset;\r\n    }\r\n    public static get displayAttractors(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.ATTRACTORS_DISPLAY_CHECKBOX_ID);\r\n    }\r\n\r\n    public static get colorMode(): ColorMode {\r\n        return Page.Tabs.getValues(controlId.COLOR_MODE_TABS_ID)[0] as ColorMode;\r\n    }\r\n    public static get autoColor(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.COLOR_AUTO_CHECKBOX_ID);\r\n    }\r\n    public static get particleColor(): [number, number, number] {\r\n        if (Parameters.autoColor) {\r\n            const cycleLength = 60000;\r\n            const now = (performance.now() % cycleLength) / cycleLength * 6;\r\n            const min = 0.2;\r\n            let r = min, g = min, b = min;\r\n            if (now < 1) {\r\n                r = 1;\r\n                g = min + (1 - min) * now;\r\n            } else if (now < 2) {\r\n                r = min + (1 - min) * (2 - now);\r\n                g = 1;\r\n            } else if (now < 3) {\r\n                g = 1;\r\n                b = min + (1 - min) * (now - 2);\r\n            } else if (now < 4) {\r\n                g = min + (1 - min) * (4 - now);\r\n                b = 1;\r\n            } else if (now < 5) {\r\n                r = min + (1 - min) * (now - 4);\r\n                b = 1;\r\n            } else {\r\n                r = 1;\r\n                b = min + (1 - min) * (6 - now);\r\n            }\r\n            return [r, g, b];\r\n        } else {\r\n            const color = Page.ColorPicker.getValue(controlId.PARTICLE_COLORPICKER_ID);\r\n            return [color.r / 255, color.g / 255, color.b / 255];\r\n        }\r\n    }\r\n    public static get colorSource(): ColorSource {\r\n        return Page.Tabs.getValues(controlId.COLOR_SOURCE_TABS_ID)[0] as ColorSource;\r\n    }\r\n    public static async inputImageUrl(): Promise<string> {\r\n        if (customImageFile) {\r\n            return new Promise<string>((resolve: (value: string) => void) => {\r\n                const reader = new FileReader();\r\n                reader.onload = () => {\r\n                    resolve(reader.result.toString());\r\n                };\r\n                reader.readAsDataURL(customImageFile);\r\n            });\r\n        } else {\r\n            const imagePreset = Page.Select.getValue(controlId.IMAGE_SELECT_ID) as ImagePreset;\r\n            if (imagePreset === ImagePreset.COLORS) {\r\n                return ImageUrlColors;\r\n            } else {\r\n                return ImageUrlLadybug;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static get spriteSize(): number {\r\n        return Page.Range.getValue(controlId.SPRITE_SIZE_RANGE_ID);\r\n    }\r\n    public static get blending(): boolean {\r\n        return Page.Checkbox.isChecked(controlId.BLENDING_CHECKBOX_ID);\r\n    }\r\n    public static get opacity(): number {\r\n        return Page.Range.getValue(controlId.OPACITY_RANGE_ID);\r\n    }\r\n}\r\n\r\nPage.Range.addObserver(controlId.SPEED_RANGE_ID, () => {\r\n    for (const observer of Parameters.speedChangeObservers) {\r\n        observer();\r\n    }\r\n});\r\n\r\nfunction callResetObservers(): void {\r\n    for (const observer of Parameters.resetObservers) {\r\n        observer();\r\n    }\r\n}\r\n\r\nfunction updateColorsVisibility(): void {\r\n    const isUnicolor = (Parameters.colorMode === ColorMode.UNICOLOR);\r\n    const imageColorSource = (Parameters.colorSource === ColorSource.IMAGE);\r\n    Page.Controls.setVisibility(controlId.COLOR_AUTO_CHECKBOX_ID, isUnicolor);\r\n    Page.Controls.setVisibility(controlId.PARTICLE_COLORPICKER_ID, isUnicolor && !Parameters.autoColor);\r\n    Page.Controls.setVisibility(controlId.COLOR_SOURCE_TABS_ID, !isUnicolor);\r\n    Page.Controls.setVisibility(controlId.IMAGE_SELECT_ID, !isUnicolor && imageColorSource);\r\n    Page.Controls.setVisibility(controlId.IMAGE_UPLOAD_BUTTON_ID, !isUnicolor && imageColorSource);\r\n}\r\n\r\nPage.Range.addLazyObserver(controlId.PARTICLES_COUNT_ID, callResetObservers);\r\nPage.Button.addObserver(controlId.RESET_BUTTON_ID, callResetObservers);\r\nPage.Tabs.addObserver(controlId.COLOR_MODE_TABS_ID, () => {\r\n    updateColorsVisibility();\r\n    if (Parameters.colorMode === ColorMode.MULTICOLOR) {\r\n        callResetObservers();\r\n    }\r\n});\r\nPage.Checkbox.addObserver(controlId.COLOR_AUTO_CHECKBOX_ID, updateColorsVisibility);\r\nPage.Tabs.addObserver(controlId.COLOR_SOURCE_TABS_ID, updateColorsVisibility);\r\nPage.Select.addObserver(controlId.IMAGE_SELECT_ID, () => {\r\n    customImageFile = null;\r\n    Page.FileControl.clearFileUpload(controlId.IMAGE_UPLOAD_BUTTON_ID);\r\n    callResetObservers();\r\n});\r\n\r\nPage.FileControl.addUploadObserver(controlId.IMAGE_UPLOAD_BUTTON_ID, (filesList: FileList) => {\r\n    Page.Select.setValue(controlId.IMAGE_SELECT_ID, null);\r\n    customImageFile = filesList[0];\r\n    callResetObservers();\r\n});\r\n\r\nupdateColorsVisibility();\r\n\r\nPage.Checkbox.addObserver(controlId.SHOW_INDICATORS_CHECKBOX_ID, (show: boolean) => {\r\n    Page.Canvas.setIndicatorsVisibility(show);\r\n});\r\nPage.Canvas.setIndicatorsVisibility(Page.Checkbox.isChecked(controlId.SHOW_INDICATORS_CHECKBOX_ID));\r\n\r\nPage.Checkbox.addObserver(controlId.BLENDING_CHECKBOX_ID, (hasBlending: boolean) => {\r\n    Page.Controls.setVisibility(controlId.OPACITY_RANGE_ID, hasBlending);\r\n});\r\nPage.Controls.setVisibility(controlId.OPACITY_RANGE_ID, Page.Checkbox.isChecked(controlId.BLENDING_CHECKBOX_ID));\r\n\r\nexport {\r\n    AttractorsPreset,\r\n    ColorMode,\r\n    ColorSource,\r\n    Parameters,\r\n};\r\n","/// <reference types=\"../webgpu-utils/wgsl-type\" />\r\n\r\nimport ShaderSource from \"../../shaders/draw-instanced.wgsl\";\r\nimport * as WebGPU from \"../webgpu-utils/webgpu-device\";\r\nimport { RendererInstanced } from \"./renderer-instanced\";\r\n\r\ntype RenderableParticlesBatch = {\r\n    gpuBuffer: GPUBuffer;\r\n    particlesCount: number;\r\n}\r\n\r\nclass RendererInstancedMonocolor extends RendererInstanced {\r\n    public constructor(targetTextureFormat: GPUTextureFormat) {\r\n        super(targetTextureFormat);\r\n\r\n        const shaderModule = WebGPU.device.createShaderModule({ code: ShaderSource });\r\n\r\n        this.createRenderPipelines({\r\n            vertex: {\r\n                module: shaderModule,\r\n                entryPoint: \"main_vertex\",\r\n                buffers: [\r\n                    {\r\n                        attributes: [\r\n                            {\r\n                                shaderLocation: 0,\r\n                                offset: 0,\r\n                                format: \"float32x2\",\r\n                            }\r\n                        ],\r\n                        arrayStride: Float32Array.BYTES_PER_ELEMENT * 4,\r\n                        stepMode: \"instance\",\r\n                    },\r\n                    {\r\n                        attributes: [\r\n                            {\r\n                                shaderLocation: 1,\r\n                                offset: 0,\r\n                                format: \"float32x2\",\r\n                            }\r\n                        ],\r\n                        arrayStride: Float32Array.BYTES_PER_ELEMENT * 2,\r\n                        stepMode: \"vertex\",\r\n                    }\r\n                ]\r\n            },\r\n            fragment: {\r\n                module: shaderModule,\r\n                entryPoint: \"main_fragment\",\r\n                targets: [],\r\n            },\r\n            primitive: {\r\n                cullMode: \"none\",\r\n                topology: \"triangle-list\",\r\n            },\r\n        });\r\n    }\r\n\r\n    public override draw(canvasWidth: number, canvasHeight: number, renderPassEncoder: GPURenderPassEncoder, particlesBatch: RenderableParticlesBatch): void {\r\n        super.updateUniformsBuffer(canvasWidth, canvasHeight);\r\n\r\n        const pipeline = this.pipeline;\r\n        renderPassEncoder.setPipeline(pipeline.renderPipeline);\r\n        renderPassEncoder.setBindGroup(0, pipeline.uniformsBindgroup);\r\n        renderPassEncoder.setVertexBuffer(0, particlesBatch.gpuBuffer);\r\n        renderPassEncoder.setVertexBuffer(1, this.quadBuffer);\r\n        renderPassEncoder.draw(6, particlesBatch.particlesCount, 0, 0);\r\n    }\r\n}\r\n\r\nexport {\r\n    RendererInstancedMonocolor,\r\n};\r\n\r\n","/// <reference types=\"../webgpu-utils/wgsl-type\" />\r\n\r\nimport ShaderSource from \"../../shaders/draw-instanced-multicolor-velocity.wgsl\";\r\nimport ColorShaderPartSource from \"../../shaders/utils/color.part.wgsl\";\r\nimport * as WebGPU from \"../webgpu-utils/webgpu-device\";\r\nimport { RendererInstanced } from \"./renderer-instanced\";\r\n\r\ntype RenderableParticlesBatch = {\r\n    gpuBuffer: GPUBuffer;\r\n    particlesCount: number;\r\n}\r\n\r\nclass RendererInstancedMulticolorVelocity extends RendererInstanced {\r\n    public constructor(targetTextureFormat: GPUTextureFormat) {\r\n        super(targetTextureFormat);\r\n\r\n        const shaderModule = WebGPU.device.createShaderModule({ code: ColorShaderPartSource + ShaderSource });\r\n\r\n        this.createRenderPipelines({\r\n            vertex: {\r\n                module: shaderModule,\r\n                entryPoint: \"main_vertex\",\r\n                buffers: [\r\n                    {\r\n                        attributes: [\r\n                            {\r\n                                shaderLocation: 0,\r\n                                offset: 0,\r\n                                format: \"float32x2\",\r\n                            },\r\n                            {\r\n                                shaderLocation: 1,\r\n                                offset: Float32Array.BYTES_PER_ELEMENT * 2,\r\n                                format: \"float32x2\",\r\n                            }\r\n                        ],\r\n                        arrayStride: Float32Array.BYTES_PER_ELEMENT * 4,\r\n                        stepMode: \"instance\",\r\n                    },\r\n                    {\r\n                        attributes: [\r\n                            {\r\n                                shaderLocation: 2,\r\n                                offset: 0,\r\n                                format: \"float32x2\",\r\n                            }\r\n                        ],\r\n                        arrayStride: Float32Array.BYTES_PER_ELEMENT * 2,\r\n                        stepMode: \"vertex\",\r\n                    }\r\n                ]\r\n            },\r\n            fragment: {\r\n                module: shaderModule,\r\n                entryPoint: \"main_fragment\",\r\n                targets: [],\r\n            },\r\n            primitive: {\r\n                cullMode: \"none\",\r\n                topology: \"triangle-list\",\r\n            },\r\n        });\r\n    }\r\n\r\n    public override draw(canvasWidth: number, canvasHeight: number, renderPassEncoder: GPURenderPassEncoder, particlesBatch: RenderableParticlesBatch): void {\r\n        super.updateUniformsBuffer(canvasWidth, canvasHeight);\r\n\r\n        const pipeline = this.pipeline;\r\n        renderPassEncoder.setPipeline(pipeline.renderPipeline);\r\n        renderPassEncoder.setBindGroup(0, pipeline.uniformsBindgroup);\r\n        renderPassEncoder.setVertexBuffer(0, particlesBatch.gpuBuffer);\r\n        renderPassEncoder.setVertexBuffer(1, this.quadBuffer);\r\n        renderPassEncoder.draw(6, particlesBatch.particlesCount, 0, 0);\r\n    }\r\n}\r\n\r\nexport {\r\n    RendererInstancedMulticolorVelocity,\r\n};\r\n","/// <reference types=\"../webgpu-utils/wgsl-type\" />\r\n\r\nimport ShaderSource from \"../../shaders/draw-instanced-multicolor.wgsl\";\r\nimport ColorShaderPartSource from \"../../shaders/utils/color.part.wgsl\";\r\nimport * as WebGPU from \"../webgpu-utils/webgpu-device\";\r\nimport { RendererInstanced } from \"./renderer-instanced\";\r\n\r\ntype RenderableParticlesBatch = {\r\n    gpuBuffer: GPUBuffer;\r\n    colorsBuffer: GPUBuffer;\r\n    particlesCount: number;\r\n}\r\n\r\nclass RendererInstancedMulticolor extends RendererInstanced {\r\n    public constructor(targetTextureFormat: GPUTextureFormat) {\r\n        super(targetTextureFormat);\r\n\r\n        const shaderModule = WebGPU.device.createShaderModule({ code: ColorShaderPartSource + ShaderSource });\r\n\r\n        this.createRenderPipelines({\r\n            vertex: {\r\n                module: shaderModule,\r\n                entryPoint: \"main_vertex\",\r\n                buffers: [\r\n                    {\r\n                        attributes: [\r\n                            {\r\n                                shaderLocation: 0,\r\n                                offset: 0,\r\n                                format: \"float32x2\",\r\n                            }\r\n                        ],\r\n                        arrayStride: Float32Array.BYTES_PER_ELEMENT * 4,\r\n                        stepMode: \"instance\",\r\n                    },\r\n                    {\r\n                        attributes: [\r\n                            {\r\n                                shaderLocation: 1,\r\n                                offset: 0,\r\n                                format: \"float32x2\",\r\n                            }\r\n                        ],\r\n                        arrayStride: Float32Array.BYTES_PER_ELEMENT * 2,\r\n                        stepMode: \"vertex\",\r\n                    },\r\n                    {\r\n                        attributes: [\r\n                            {\r\n                                shaderLocation: 2,\r\n                                offset: 0,\r\n                                format: \"uint32\",\r\n                            }\r\n                        ],\r\n                        arrayStride: Uint32Array.BYTES_PER_ELEMENT,\r\n                        stepMode: \"instance\",\r\n                    }\r\n                ]\r\n            },\r\n            fragment: {\r\n                module: shaderModule,\r\n                entryPoint: \"main_fragment\",\r\n                targets: [],\r\n            },\r\n            primitive: {\r\n                cullMode: \"none\",\r\n                topology: \"triangle-list\",\r\n            },\r\n        });\r\n    }\r\n\r\n    public override draw(canvasWidth: number, canvasHeight: number, renderPassEncoder: GPURenderPassEncoder, particlesBatch: RenderableParticlesBatch): void {\r\n        super.updateUniformsBuffer(canvasWidth, canvasHeight);\r\n\r\n        const pipeline = this.pipeline;\r\n        renderPassEncoder.setPipeline(pipeline.renderPipeline);\r\n        renderPassEncoder.setBindGroup(0, pipeline.uniformsBindgroup);\r\n        renderPassEncoder.setVertexBuffer(0, particlesBatch.gpuBuffer);\r\n        renderPassEncoder.setVertexBuffer(1, this.quadBuffer);\r\n        renderPassEncoder.setVertexBuffer(2, particlesBatch.colorsBuffer);\r\n        renderPassEncoder.draw(6, particlesBatch.particlesCount, 0, 0);\r\n    }\r\n}\r\n\r\nexport {\r\n    RendererInstancedMulticolor,\r\n};\r\n","/// <reference types=\"../webgpu-utils/wgsl-type\" />\r\n\r\nimport * as WebGPU from \"../webgpu-utils/webgpu-device\";\r\nimport { Renderer } from \"./renderer\";\r\n\r\nabstract class RendererInstanced extends Renderer {\r\n    protected readonly quadBuffer: GPUBuffer;\r\n\r\n    public constructor(targetTextureFormat: GPUTextureFormat) {\r\n        super(targetTextureFormat);\r\n\r\n        this.quadBuffer = WebGPU.device.createBuffer({\r\n            size: Float32Array.BYTES_PER_ELEMENT * 2 * 6,\r\n            usage: GPUBufferUsage.VERTEX,\r\n            mappedAtCreation: true,\r\n        });\r\n        new Float32Array(this.quadBuffer.getMappedRange()).set([\r\n            -1, -1, +1, -1, +1, +1,\r\n            -1, -1, +1, +1, -1, +1\r\n        ]);\r\n        this.quadBuffer.unmap();\r\n    }\r\n}\r\n\r\nexport {\r\n    RendererInstanced,\r\n};\r\n\r\n","/// <reference types=\"../webgpu-utils/wgsl-type\" />\r\n\r\nimport ShaderSource from \"../../shaders/draw.wgsl\";\r\nimport * as WebGPU from \"../webgpu-utils/webgpu-device\";\r\nimport { Renderer } from \"./renderer\";\r\n\r\ntype RenderableParticlesBatch = {\r\n    gpuBuffer: GPUBuffer;\r\n    particlesCount: number;\r\n}\r\n\r\nclass RendererMonocolor extends Renderer {\r\n    public constructor(targetTextureFormat: GPUTextureFormat) {\r\n        super(targetTextureFormat);\r\n\r\n        const shaderModule = WebGPU.device.createShaderModule({ code: ShaderSource });\r\n\r\n        this.createRenderPipelines({\r\n            vertex: {\r\n                module: shaderModule,\r\n                entryPoint: \"main_vertex\",\r\n                buffers: [\r\n                    {\r\n                        attributes: [\r\n                            {\r\n                                shaderLocation: 0,\r\n                                offset: 0,\r\n                                format: \"float32x2\",\r\n                            }\r\n                        ],\r\n                        arrayStride: Float32Array.BYTES_PER_ELEMENT * 4,\r\n                        stepMode: \"vertex\",\r\n                    }\r\n                ]\r\n            },\r\n            fragment: {\r\n                module: shaderModule,\r\n                entryPoint: \"main_fragment\",\r\n                targets: [],\r\n            },\r\n            primitive: {\r\n                cullMode: \"none\",\r\n                topology: \"point-list\",\r\n            },\r\n        });\r\n    }\r\n\r\n    public override draw(canvasWidth: number, canvasHeight: number, renderPassEncoder: GPURenderPassEncoder, particlesBatch: RenderableParticlesBatch): void {\r\n        super.updateUniformsBuffer(canvasWidth, canvasHeight);\r\n\r\n        const pipeline = this.pipeline;\r\n        renderPassEncoder.setPipeline(pipeline.renderPipeline);\r\n        renderPassEncoder.setBindGroup(0, pipeline.uniformsBindgroup);\r\n        renderPassEncoder.setVertexBuffer(0, particlesBatch.gpuBuffer);\r\n        renderPassEncoder.draw(particlesBatch.particlesCount, 1, 0, 0);\r\n    }\r\n}\r\n\r\nexport {\r\n    RendererMonocolor,\r\n};\r\n\r\n","/// <reference types=\"../webgpu-utils/wgsl-type\" />\r\n\r\nimport ShaderSource from \"../../shaders/draw-multicolor-velocity.wgsl\";\r\nimport ColorShaderPartSource from \"../../shaders/utils/color.part.wgsl\";\r\nimport * as WebGPU from \"../webgpu-utils/webgpu-device\";\r\nimport { Renderer } from \"./renderer\";\r\n\r\ntype RenderableParticlesBatch = {\r\n    gpuBuffer: GPUBuffer;\r\n    particlesCount: number;\r\n}\r\n\r\nclass RendererMulticolorVelocity extends Renderer {\r\n    public constructor(targetTextureFormat: GPUTextureFormat) {\r\n        super(targetTextureFormat);\r\n\r\n        const shaderModule = WebGPU.device.createShaderModule({ code: ColorShaderPartSource + ShaderSource });\r\n\r\n        this.createRenderPipelines({\r\n            vertex: {\r\n                module: shaderModule,\r\n                entryPoint: \"main_vertex\",\r\n                buffers: [\r\n                    {\r\n                        attributes: [\r\n                            {\r\n                                shaderLocation: 0,\r\n                                offset: 0,\r\n                                format: \"float32x2\",\r\n                            },\r\n                            {\r\n                                shaderLocation: 1,\r\n                                offset: Float32Array.BYTES_PER_ELEMENT * 2,\r\n                                format: \"float32x2\",\r\n                            }\r\n                        ],\r\n                        arrayStride: Float32Array.BYTES_PER_ELEMENT * 4,\r\n                        stepMode: \"vertex\",\r\n                    }\r\n                ]\r\n            },\r\n            fragment: {\r\n                module: shaderModule,\r\n                entryPoint: \"main_fragment\",\r\n                targets: [],\r\n            },\r\n            primitive: {\r\n                cullMode: \"none\",\r\n                topology: \"point-list\",\r\n            },\r\n        });\r\n    }\r\n\r\n    public override draw(canvasWidth: number, canvasHeight: number, renderPassEncoder: GPURenderPassEncoder, particlesBatch: RenderableParticlesBatch): void {\r\n        super.updateUniformsBuffer(canvasWidth, canvasHeight);\r\n\r\n        const pipeline = this.pipeline;\r\n        renderPassEncoder.setPipeline(pipeline.renderPipeline);\r\n        renderPassEncoder.setBindGroup(0, pipeline.uniformsBindgroup);\r\n        renderPassEncoder.setVertexBuffer(0, particlesBatch.gpuBuffer);\r\n        renderPassEncoder.draw(particlesBatch.particlesCount, 1, 0, 0);\r\n    }\r\n}\r\n\r\nexport {\r\n    RendererMulticolorVelocity,\r\n};\r\n\r\n","/// <reference types=\"../webgpu-utils/wgsl-type\" />\r\n\r\nimport ShaderSource from \"../../shaders/draw-multicolor.wgsl\";\r\nimport ColorShaderPartSource from \"../../shaders/utils/color.part.wgsl\";\r\nimport * as WebGPU from \"../webgpu-utils/webgpu-device\";\r\nimport { Renderer } from \"./renderer\";\r\n\r\ntype RenderableParticlesBatch = {\r\n    gpuBuffer: GPUBuffer;\r\n    colorsBuffer: GPUBuffer;\r\n    particlesCount: number;\r\n}\r\n\r\nclass RendererMulticolor extends Renderer {\r\n    public constructor(targetTextureFormat: GPUTextureFormat) {\r\n        super(targetTextureFormat);\r\n\r\n        const shaderModule = WebGPU.device.createShaderModule({ code: ColorShaderPartSource + ShaderSource });\r\n\r\n        this.createRenderPipelines({\r\n            vertex: {\r\n                module: shaderModule,\r\n                entryPoint: \"main_vertex\",\r\n                buffers: [\r\n                    {\r\n                        attributes: [\r\n                            {\r\n                                shaderLocation: 0,\r\n                                offset: 0,\r\n                                format: \"float32x2\",\r\n                            }\r\n                        ],\r\n                        arrayStride: Float32Array.BYTES_PER_ELEMENT * 4,\r\n                        stepMode: \"vertex\",\r\n                    },\r\n                    {\r\n                        attributes: [\r\n                            {\r\n                                shaderLocation: 1,\r\n                                offset: 0,\r\n                                format: \"uint32\",\r\n                            }\r\n                        ],\r\n                        arrayStride: Uint32Array.BYTES_PER_ELEMENT,\r\n                        stepMode: \"vertex\",\r\n                    }\r\n                ]\r\n            },\r\n            fragment: {\r\n                module: shaderModule,\r\n                entryPoint: \"main_fragment\",\r\n                targets: [],\r\n            },\r\n            primitive: {\r\n                cullMode: \"none\",\r\n                topology: \"point-list\",\r\n            },\r\n        });\r\n    }\r\n\r\n    public override draw(canvasWidth: number, canvasHeight: number, renderPassEncoder: GPURenderPassEncoder, particlesBatch: RenderableParticlesBatch): void {\r\n        super.updateUniformsBuffer(canvasWidth, canvasHeight);\r\n\r\n        const pipeline = this.pipeline;\r\n        renderPassEncoder.setPipeline(pipeline.renderPipeline);\r\n        renderPassEncoder.setBindGroup(0, pipeline.uniformsBindgroup);\r\n        renderPassEncoder.setVertexBuffer(0, particlesBatch.gpuBuffer);\r\n        renderPassEncoder.setVertexBuffer(1, particlesBatch.colorsBuffer);\r\n        renderPassEncoder.draw(particlesBatch.particlesCount, 1, 0, 0);\r\n    }\r\n}\r\n\r\nexport {\r\n    RendererMulticolor,\r\n};\r\n\r\n","import { Parameters } from \"../parameters\";\r\nimport * as WebGPU from \"../webgpu-utils/webgpu-device\";\r\n\r\ntype Pipeline = {\r\n    renderPipeline: GPURenderPipeline;\r\n    uniformsBindgroup: GPUBindGroup;\r\n}\r\n\r\ntype RenderableParticlesBatch = {\r\n    gpuBuffer: GPUBuffer;\r\n    colorsBuffer: GPUBuffer;\r\n    particlesCount: number;\r\n}\r\n\r\nabstract class Renderer {\r\n    private readonly uniformsBuffer: GPUBuffer;\r\n\r\n    private pipelineAdditiveBlending: Pipeline;\r\n    private pipelineNoBlending: Pipeline;\r\n\r\n    protected constructor(private readonly targetTextureFormat: GPUTextureFormat) {\r\n        this.uniformsBuffer = WebGPU.device.createBuffer({\r\n            size: 24,\r\n            usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM,\r\n        });\r\n    }\r\n\r\n    public abstract draw(canvasWidth: number, canvasHeight: number, renderPassEncoder: GPURenderPassEncoder, particlesBatch: RenderableParticlesBatch): void;\r\n\r\n    protected createRenderPipelines(descriptor: GPURenderPipelineDescriptor): void {\r\n        descriptor.fragment.targets = [{\r\n            format: this.targetTextureFormat\r\n        }];\r\n        this.pipelineNoBlending = this.createPipeline(descriptor);\r\n\r\n        descriptor.fragment.targets = [{\r\n            format: this.targetTextureFormat,\r\n            blend: {\r\n                color: {\r\n                    srcFactor: 'src-alpha',\r\n                    dstFactor: 'one',\r\n                    operation: 'add',\r\n                },\r\n                alpha: {\r\n                    srcFactor: 'zero',\r\n                    dstFactor: 'one',\r\n                    operation: 'add',\r\n                }\r\n            }\r\n        }];\r\n        this.pipelineAdditiveBlending = this.createPipeline(descriptor);\r\n    }\r\n\r\n    protected updateUniformsBuffer(canvasWidth: number, canvasHeight: number): void {\r\n        const color = Parameters.particleColor;\r\n        const uniformsData = [color[0], color[1], color[2], Parameters.opacity, Parameters.spriteSize / canvasWidth, Parameters.spriteSize / canvasHeight];\r\n        WebGPU.device.queue.writeBuffer(this.uniformsBuffer, 0, new Float32Array(uniformsData).buffer);\r\n    }\r\n\r\n    protected get pipeline(): Pipeline {\r\n        if (Parameters.blending) {\r\n            return this.pipelineAdditiveBlending;\r\n        } else {\r\n            return this.pipelineNoBlending;\r\n        }\r\n    }\r\n\r\n    private createPipeline(descriptor: GPURenderPipelineDescriptor): Pipeline {\r\n        const pipeline = WebGPU.device.createRenderPipeline(descriptor);\r\n        const uniformsBindgroup = WebGPU.device.createBindGroup({\r\n            layout: pipeline.getBindGroupLayout(0),\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: {\r\n                        buffer: this.uniformsBuffer,\r\n                    }\r\n                }\r\n            ]\r\n        });\r\n        return { renderPipeline: pipeline, uniformsBindgroup };\r\n    }\r\n}\r\n\r\nexport {\r\n    Renderer,\r\n};\r\n","import * as WebGPU from \"./webgpu-device\";\r\n\r\nclass WebGPUCanvas {\r\n    private readonly devicePixelRatio: number;\r\n    private readonly context: GPUCanvasContext;\r\n    private readonly canvasConfiguration: GPUCanvasConfiguration;\r\n\r\n    public readonly textureFormat: GPUTextureFormat;\r\n    public readonly clearColor: GPUColorDict;\r\n\r\n    public constructor(private readonly canvas: HTMLCanvasElement) {\r\n        this.devicePixelRatio = window.devicePixelRatio;\r\n\r\n        const contextName = \"webgpu\";\r\n        this.context = canvas.getContext(contextName);\r\n        if (!this.context) {\r\n            throw new Error(`Failed to get a '${contextName}' context from canvas.`);\r\n        }\r\n\r\n        this.canvasConfiguration = {\r\n            device: WebGPU.device,\r\n            format: this.context.getPreferredFormat(WebGPU.adapter),\r\n            usage: GPUTextureUsage.RENDER_ATTACHMENT,\r\n            // no \"size\" attribute to use the canvas' width and height\r\n        };\r\n        this.context.configure(this.canvasConfiguration);\r\n\r\n        this.textureFormat = this.canvasConfiguration.format;\r\n        this.clearColor = { r: 0, g: 0, b: 0, a: 1 };\r\n    }\r\n\r\n    public get width(): number {\r\n        return this.canvas.width;\r\n    }\r\n\r\n    public get height(): number {\r\n        return this.canvas.height;\r\n    }\r\n\r\n    public adjustSize(): void {\r\n        const actualWidth = Math.floor(this.devicePixelRatio * this.canvas.clientWidth);\r\n        const actualHeight = Math.floor(this.devicePixelRatio * this.canvas.clientHeight);\r\n\r\n        if (this.canvas.width !== actualWidth || this.canvas.height !== actualHeight) {\r\n            this.canvas.width = actualWidth;\r\n            this.canvas.height = actualHeight;\r\n\r\n            this.context.configure(this.canvasConfiguration);\r\n        }\r\n    }\r\n\r\n    public getRenderPassDescriptor(): GPURenderPassDescriptor {\r\n        const colorAttachment: GPURenderPassColorAttachment = {\r\n            view: this.context.getCurrentTexture().createView(),\r\n            loadOp: 'clear',\r\n            clearValue: this.clearColor,\r\n            storeOp: 'store'\r\n        };\r\n\r\n        const renderPassDesc: GPURenderPassDescriptor = {\r\n            colorAttachments: [colorAttachment],\r\n        };\r\n\r\n        return renderPassDesc;\r\n    }\r\n\r\n    public setFullcanvasViewport(renderPassEncoder: GPURenderPassEncoder): void {\r\n        renderPassEncoder.setViewport(0, 0, this.width, this.height, 0, 1);\r\n    }\r\n\r\n    public setFullcanvasScissor(renderPassEncoder: GPURenderPassEncoder): void {\r\n        renderPassEncoder.setScissorRect(0, 0, this.width, this.height);\r\n    }\r\n}\r\n\r\nexport {\r\n    WebGPUCanvas,\r\n};\r\n","/// <reference types=\"../page-interface-generated\" />\r\n/// <reference types=\"@webgpu/types\" />\r\n\r\nfunction throwAndDisplayException(id: string, message: string): void {\r\n    Page.Demopage.setErrorMessage(id, message);\r\n    Page.Canvas.toggleFullscreen(false);\r\n    throw new Error(message);\r\n}\r\n\r\nconst gpu: GPU = navigator.gpu;\r\nif (!gpu) {\r\n    throwAndDisplayException(\"webgpu-support\", \"Your browser does not seem to support WebGPU.\");\r\n}\r\n\r\nlet adapter: GPUAdapter | null = null;\r\nlet device: GPUDevice | null = null;\r\n\r\nasync function requestDevice(): Promise<void> {\r\n    if (!device) {\r\n        adapter = await gpu.requestAdapter();\r\n        if (!adapter) {\r\n            throwAndDisplayException(\"webgpu-adapter\", \"Request for GPU adapter failed.\");\r\n        }\r\n        if (adapter.isFallbackAdapter) {\r\n            Page.Demopage.setErrorMessage(\"webgpu-is-fallback\", \"The retrieved GPU adapter is fallback. The performance might be degraded.\");\r\n        }\r\n        device = await adapter.requestDevice();\r\n    }\r\n}\r\n\r\nexport {\r\n    adapter,\r\n    device,\r\n    gpu,\r\n    requestDevice as initialize,\r\n};\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/ts/main.ts\");\n",""],"names":[],"sourceRoot":""}